# Continuous Integration
name: continuous-integration
run-name: CI pipeline for ${{ github.ref_name }}

on:
  # Runs on pushes targeting 'feature branches' (any branch that is NOT the default branch)
  push:
    branches-ignore: [main]

jobs:
  # Check feature (id#) has not been done before (in case local repo keeps using branch and then pushes)
  # If already done... then??? Maybe append "part 2" as pattern... to PR and release etc


  # Create PR for this feature (if does not exist)
  pr-ci: 
    name: PR Open-Reopen
    timeout-minutes: 10
    permissions:
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.setoutput.outputs.NPM_TAG }}
      feature-branch: ${{ steps.setoutput.outputs.FB }}
    env:
      GH_TOKEN: ${{ github.token }}

    steps:

      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Create/Reopen Pull Request
        run: gh pr edit ${{ github.ref_name }} -b "Reopened by Github action" -t ${{ github.ref_name }} && gh pr reopen ${{ github.ref_name }} || gh pr create -t ${{ github.ref_name }} -b "Created by Github action"

      - name: Get NPM Package Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.2.3
        # https://github.com/martinbeentjes/npm-get-version-action

      - name: Set outputs
        id: setoutput
        run: | 
          echo "Package Version is ${{ steps.package-version.outputs.current-version }}"
          echo "NPM_TAG=${{steps.package-version.outputs.current-version}}" >> $GITHUB_OUTPUT
          echo "FB=${{ github.ref_name }}" >> $GITHUB_OUTPUT



  # Add data for metrics: "lead time to change" (first push to remote)

  # Update issue with comment (that PR is created with link to it)


  # Build static site using Reveal-MD
  build-ci:
    name: Build-CI
    needs: [pr-ci]
    uses: ./.github/workflows/reuse-build-revealmd.yml
    with: 
      target-ref: ${{ github.ref_name }}
      deploy-stage: 'ci'

  # (1) TODO: PR Checks for Build/Tests
  # https://sagarsonwane230797.medium.com/automate-build-checks-and-slack-notification-with-github-actions-3b7eb702dae6
  # https://josh-ops.com/posts/using-github-checks-api/


  # Merge PR if ready (note: by "[merge ci]" in message of final commit on feature branch)
  pr-merge-ci: 
    name: PR Merge CI
    needs: [pr-ci, build-ci]
    if: ${{ contains(github.event.head_commit.message, '[merge ci]') }}
    timeout-minutes: 10
    runs-on: ubuntu-latest    
    steps:

      - name: Checkout Feature Branch
        uses: actions/checkout@v3

      - name: Merge Pull Request
        run: gh pr merge ${{ github.ref_name }} --squash --subject "${{ github.ref_name }} ${{ needs.pr-ci.outputs.package-version }}" --body "Automerged by GitHub Action"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: GitHub Step Summary
        run: echo "### PR Merge Success! :thumbsup:" >> $GITHUB_STEP_SUMMARY    


  # Create release using GitHub CLI (auto adds tag to commit and generates release notes)
  create-release-and-tag:
    name: Create Release and Tag Commit
    needs: [pr-ci, pr-merge-ci]
    timeout-minutes: 10
    runs-on: ubuntu-latest  
    permissions:
      contents: write
    steps:

      - name: Checkout Feature Branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 5
          token: ${{ secrets.GHA_PAT }}

      - name: Add Git Tag
        run: | 
          echo "Git tag is ${{ needs.pr-ci.outputs.package-version}}"
          git config user.name github-actions
          git config user.email github-actions@github.com          
          git tag -a ${{ format('{0}{1}', 'v', needs.pr-ci.outputs.package-version) }} -m 'Release version ${{ needs.pr-ci.outputs.package-version }}'
          git push origin ${{ format('{0}{1}', 'v', needs.pr-ci.outputs.package-version) }}

      - name: Create Release 
        run: gh release create ${{ format('{0}{1}', 'v', needs.pr-ci.outputs.package-version) }} --generate-notes --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # Deploy to GitHub Pages on the Stage Repo
  deploy-ci:
    name: Deploy GHP(CI)
    needs: [create-release-and-tag]
    if: ${{ contains(github.event.head_commit.message, '[deploy ci]') }}
    uses: ./.github/workflows/reuse-deploy-github-pages.yml
    permissions:
      contents: read
      pages: write
      id-token: write
    with:
      target-ref: ${{ format('{0}{1}', 'v', needs.pr-ci.outputs.package-version) }}
      deploy-target: 'ci'
    secrets: inherit


  # Scheduled dispatch to Canary
  dispatch-deploy-stage:
    name: Dispatch to Deploy to Stage
    needs: [create-release-and-tag]
    uses: ./.github/workflows/continuous-delivery.yml
    with: 
      target-ref: 'main'
      deploy-target: 'stg'
    secrets: inherit   




  # (3) Dispatch to deploy to Stage
  # TODO: Setup repo for this and workflow
  # Stage repo workflow: 1) get build artifacts... 2) add stage config... 3) deploy to GHP... 4) do smoke testing
  # Workflow above calls each point above, which is a workflow in this repo (reuse)
  # Note: stage config shows that in stage (i.e. red background)
  # Note: Stage should have all contents (i.e. canary indicator)... which can get deleted in canary delployment
  
  # If smoke tests fail: notify PR team and Dev team and exit this workflow
  # PR team will delete that release in this repo
  # Could automate: 1) delete release... 2) trigger rollback workflow that builds and deploys usng last working commit SHA

  # Dev team notified via new issue with label
  # Rollback workflow updates this issue

  # Add data for metrics: "change failure rate" (this is a failure at stage... so log)
  # Add data for metrics: "mean time to recovery" from failure to rollback deployed in Stage

  # Dispatch to deploy to Canary
  # TODO: Setup repo for this and workflow (same as Stage)
  # Same smoke testing (aka PVT) and flow

  # Add data for metrics: "deployment frequency" (deployed to Canary as measure)
  # Add data for metrics: "lead time to change" (change in canary considered as change released to user)

  # End this workflow: From first push of feature change... to integration... to delivery via PR... to deployment to canary (aka Prod)


# Useful to checking jobs done before next job
#  merge-ready:
#    name: Merge Ready - Feature Branch to Truck
#    needs: [get-tag, update-package-version, build-ci]
#    if: |
#      always() &&
#      !contains(needs.*.result, 'failure') &&
#      !contains(needs.*.result, 'cancelled')
#    timeout-minutes: 10
#    runs-on: ubuntu-latest 
#    steps:
#      - name: Ready message
#        run: echo "### Merge Ready :thumbsup:" >> $GITHUB_STEP_SUMMARY   


# :-)